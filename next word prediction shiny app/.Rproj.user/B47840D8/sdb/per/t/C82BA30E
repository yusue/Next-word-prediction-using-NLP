{
    "collab_server" : "",
    "contents" : "\nbigram <- readRDS(\"2-freq.RData\")\n\nwords = list()\n# Define UI for application that draws a histogram\n\nserver <- function(input, output, session){\n    # typeahead\n    observe({\n        input$textInput01 # read-only\n        \n        # alphabetial and lower-case only \n        text <- tolower(input$textInput01)\n        text <- gsub(\"^[^a-z]+|[^a-z]+$\", \" \", text)\n        text <- str_trim(gsub(\"\\\\s+\", \" \", text))\n        \n        # convert input to a list of words\n        words <<- unlist(strsplit(text, \" \"))\n        print(paste0(\"words: \", words))\n        if (length(words) == 0){\n            # show message\n            if (str_trim(input$textInput01) != \"\"){\n                showshinyalert(session=session, \n                               id=\"shinyalert01\", \n                               HTMLtext=paste0(\"\\\"\", input$textInput01, \n                                               \"\\\" isn't valid input for prediction.\"), \n                               styleclass=\"danger\")\n            }\n            output$verbatimTextOutput01 <- renderText(NULL)\n            output$tableOutput01 <- renderTable(NULL)\n            output$barplot01 <- renderPlot(NULL)\n            return()\n        } \n        \n        # show message\n        showshinyalert(session=session, \n                       id=\"shinyalert01\", \n                       HTMLtext=paste0(\"Words for prediction are \\\"\", text, \"\\\".\"), \n                       styleclass=\"info\")\n        \n        \n        \n        # search bigram dictionary\n        # always match with the last  words\n        # pattern = paste0('^', paste(words, collapse =   '_'))\n        pattern  = paste0('^', words[length(words)])\n        \n        pred = bigram[grep(pattern, bigram$feature), ][1:20, 1:3]\n        # match with the last word\n        if (length(words)>1 & dim(pred)[1]==0){\n            pred <- head(bigram[grep(paste0(\"^\", words[length(words)], \" \"), \n                                     bigram[,'feature']),], 20)}\n        \n        if (dim(pred)[1]==0){pred <- bigram[1:20,]}\n        \n        head(pred)\n        if (dim(pred)[1] != 0){\n            # output the prediction\n            output$verbatimTextOutput01 <- renderText({pred[1,1]})\n            # show predicted words table\n            output$tableOutput01 <- renderTable(head(pred))\n            # plot bar chart\n            output$barplot01 <- renderPlot({\n                p01 <- ggplot(data=pred, aes(x= reorder(feature, -frequency) , y=frequency)) +\n                    geom_bar(stat=\"identity\", fill=\"grey\") +\n                    # geom_label_repel(aes(label=ngrams), size=4) +\n                    geom_label_repel(aes(label=feature), size=4) +\n                    labs(title=\"Predicted next word by frequency\",\n                         x=\"\", y=\"Frequency\") +\n                    theme(plot.title=element_text(size=30, face=\"bold\"),\n                          axis.text.x=element_blank(),\n                          axis.text.y=element_text(angle=90))\n                print(p01)\n            }) # end of renderPlot()  \n            return()\n        } # if (dim(pred)[1] != 0)\n        \n        output$verbatimTextOutput01 <- renderText(\"(No prediction)\")\n        output$tableOutput01 <- renderTable(NULL)\n        output$barplot01 <- renderPlot(NULL)\n        \n    }) # end of observe input$typeahead01\n    \n    # click on \"Clear Input\" button\n    observeEvent(input$actionButton01, {\n        words <<- list()\n        updateTextInput(session, \"textInput01\", value=\"\")\n        output$verbatimTextOutput01 <- renderText(NULL)\n        output$tableOutput01 <- renderTable(NULL)\n        output$barplot01 <- renderPlot(NULL)\n        # show message\n        showshinyalert(session=session, \n                       id=\"shinyalert01\", \n                       HTMLtext=paste0(\"Input has been cleared.\"), \n                       styleclass=\"success\")\n        return()\n    }) # end of observeEvent input$actionButton01\n    \n} # end of server function\n\n# shinyApp(ui=ui, server=server)",
    "created" : 1584804275700.000,
    "dirty" : false,
    "encoding" : "ASCII",
    "folds" : "",
    "hash" : "2432581511",
    "id" : "C82BA30E",
    "lastKnownWriteTime" : 1584804545,
    "last_content_update" : 1584804545623,
    "path" : "~/git_repo/word_pred_app/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}